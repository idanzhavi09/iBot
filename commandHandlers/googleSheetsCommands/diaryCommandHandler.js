const { GoogleSpreadsheet } = require('google-spreadsheet');
const dotenv = require('dotenv');
const { content } = require('googleapis/build/src/apis/content');

async function addLog(CONTENT , PHONE_NUMBER){
    const doc = new GoogleSpreadsheet(process.env.DIARY_SPREADSHEETS_KEY);
        await doc.useServiceAccountAuth({
            // env var values are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            client_email: process.env.client_email,
            private_key: process.env.private_key,
          });

          await doc.loadInfo(); // loads document properties and worksheets

          const sheet = doc.sheetsByIndex[0];
          const rows = await (await sheet).getRows()
          let today = new Date();
          let date = today.getFullYear()+'/'+(today.getMonth()+1)+'/'+today.getDate();
          let content = CONTENT;
          const addrow = await (await sheet).addRow({PHONE_NUMBER: PHONE_NUMBER , DATE: date , CONTENT: content})
}

async function getLogsForDate(DATE , PHONE_NUMBER){
    const doc = new GoogleSpreadsheet(process.env.DIARY_SPREADSHEETS_KEY);
        await doc.useServiceAccountAuth({
            // env var values are copied from service account credentials generated by google
            // see "Authentication" section in docs for more info
            client_email: process.env.client_email,
            private_key: process.env.private_key,
          });

          await doc.loadInfo(); // loads document properties and worksheets

          const sheet = doc.sheetsByIndex[0];
          const rows = await (await sheet).getRows()
          let logs = [];
          rows.forEach(row => {
                if(row.DATE == DATE && row.PHONE_NUMBER == PHONE_NUMBER){
                    logs.push(row.CONTENT);
                }
          });
          let messageLogs = "תיעודים:";
          let i = 1;
          logs.forEach(log => {
              messageLogs += "\n" + "(" + i + ")" + log;
              i++;
          });

          return Promise.resolve(messageLogs);
}

module.exports = {
    addLog,
    getLogsForDate,
}